<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright (c) 2013 Sonrisa Informatikai Kft. All Rights Reserved.

This software is the confidential and proprietary information of
Sonrisa Informatikai Kft. ("Confidential Information").
You shall not disclose such Confidential Information and shall use it only in
accordance with the terms of the license agreement you entered into
with Sonrisa.

   SONRISA MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF
   THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
   TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
   PARTICULAR PURPOSE, OR NON-INFRINGEMENT. SONRISA SHALL NOT BE LIABLE FOR
   ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR
   DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.
  -->
<beans xmlns="http://www.springframework.org/schema/beans" 
             xmlns:aop="http://www.springframework.org/schema/aop"
             xmlns:tx="http://www.springframework.org/schema/tx" 
             xmlns:p="http://www.springframework.org/schema/p" 
             xmlns:batch="http://www.springframework.org/schema/batch"
             xmlns:context="http://www.springframework.org/schema/context"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:jdbc="http://www.springframework.org/schema/jdbc"
             xsi:schemaLocation="http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/batch 
        http://www.springframework.org/schema/batch/spring-batch-2.2.xsd
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-3.2.xsd
        http://www.springframework.org/schema/jdbc 
        http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd">
    

    <batch:job id="kountaProcessingJob">   
        <batch:description>
            This job is responsible for launching the processing job for Kounta stores.
        </batch:description>
        <batch:step id="kountaProcessingMaster">
            <batch:partition step="kountaProcessingSlave" partitioner="kountaProcessingTaskPartitioner">
                <batch:handler grid-size="5" task-executor="taskExecutor" />
            </batch:partition>
        </batch:step>
    </batch:job>
    
    <batch:step id="kountaProcessingSlave">
			<!--   
			Each item is expected to take a long time process, so 
			a low commit interval can be used.
			 
			Skip limit is set lower than the commit interval, because 10 
			consecutive errors mean there's probably something wrong with
			the remote service.
			-->
             <batch:tasklet transaction-manager="transactionManager" >
                    <batch:chunk reader="kountaProcessingLauncherReader" 
                                 processor="kountaProcessingLauncherProcessor"
                                 writer="processingLauncherWriter"  
                                 commit-interval="50" skip-limit="10">
                                 
			            <batch:skippable-exception-classes>
			            	<!-- If any external exception occurs,
			            	     we can just skip it, as the lines_processed column
			            	     will not be modified.
			            	 -->
			            	<batch:include class="com.sonrisa.swarm.posintegration.exception.ExternalExtractorException"/>
			         	</batch:skippable-exception-classes>
                     </batch:chunk>
            </batch:tasklet>
            <batch:listeners>
                 <batch:listener ref="stepLoggingListener"/>
            </batch:listeners>
    </batch:step>
     
    <bean id="taskExecutor" class="org.springframework.core.task.SimpleAsyncTaskExecutor" />
    
    <bean id="kountaProcessingTaskPartitioner" class="com.sonrisa.swarm.job.partitioner.SimpleExtractorJobPartitioner" >
       <property name="apiName" value="${api.name.kounta}"/>
       <property name="queryString" value="${kounta.processor.query.invoices}"/>
    </bean>
        
     <!-- Reader, writer, processor -->
    <bean id="kountaProcessingLauncherReader" class="com.sonrisa.swarm.job.InvoiceProcessorReader" scope="step">
        <property name="fromId" value="#{stepExecutionContext[fromId]}" />
        <property name="toId" value="#{stepExecutionContext[toId]}" />
        <property name="apiName" value="${api.name.kounta}"/>
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
		<property name="queryString" value="select i from InvoiceEntity i where (i.store.apiId = :apiId) and (i.linesProcessed = FALSE) and (i.id &gt;= :fromId) and (i.id &lt;= :toId)"/>        
        <property name="pageSize" value="50"/>
    </bean>    
    <bean id="kountaProcessingLauncherProcessor" class="com.sonrisa.swarm.kounta.job.KountaProcessorLauncher" />
    <bean id="processingLauncherWriter" class="com.sonrisa.swarm.job.InvoiceProcessorWriter"/>
</beans>
